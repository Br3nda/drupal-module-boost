<?php
// $Id: boost.install,v 1.2.2.1.2.3.2.12 2009/06/13 10:14:16 mikeytown2 Exp $

/**
 * @file
 * Handles Boost module installation and upgrade tasks.
 */

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_enable().
 */
function boost_enable() {
  drupal_set_message(t('Boost successfully installed. Please review the available <a href="@settings">configuration settings</a>.', array('@settings' => url('admin/settings/performance'))));

  // Forcibly disable Drupal's built-in SQL caching to prevent any conflicts of interest:
  if (variable_get('cache', CACHE_DISABLED) != CACHE_DISABLED) {
    variable_set('cache', CACHE_DISABLED);
    drupal_set_message(t('Drupal\'s standard page caching disabled by Boost.'));
  }
}

/**
 * Implementation of hook_disable().
 */
function boost_disable() {
  // Make sure that the static page cache is wiped when the module is disabled:
  boost_cache_clear_all();
  drupal_set_message(t('Static page cache cleared.'));
}

/**
 * Implementation of hook_install().
 */
function boost_install() {
  // Ensure that the module is loaded early in the bootstrap:
  db_query("UPDATE {system} SET weight = -90 WHERE name = '%s'", 'boost');
}

/**
 * Implementation of hook_uninstall().
 */
function boost_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE '%s_%%'", 'boost');
  cache_clear_all('variables', 'cache');
}

/**
 * Implementation of hook_requirements().
 */
function boost_requirements($phase) {
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    case 'runtime':
      $cache_directory = variable_get('boost_file_path', boost_cache_directory(NULL, FALSE));
      $htaccess = file_get_contents('.htaccess');
      $root_file = file_put_contents($cache_directory . '/' . variable_get('boost_root_file', '.boost'), $cache_directory);

      if ($cache_directory != boost_cache_directory(NULL, FALSE)) {
        $requirements['boost'] = array(
          'title'       => $t('Boost'),
          'description' => $t('!url: is not set to the default(!default). ', array('!url' => l('Cache file path', 'admin/settings/performance'), '!default'    => boost_cache_directory(NULL, FALSE))),
          'severity'    => REQUIREMENT_WARNING,
          'value'       => $t('Cache path'),
        );
      }
      else if (!is_dir($cache_directory)) {
        $requirements['boost'] = array(
          'title'       => $t('Boost'),
          'description' => $t('!cache_dir: does not exist.', array('!cache_dir' => $cache_directory)),
          'severity'    => REQUIREMENT_ERROR,
          'value'       => $t('Cache path'),
        );
      }
      else if ($htaccess && count(explode("%{REQUEST_URI}_%{QUERY_STRING}\.html", $htaccess)) < 5) {
        $requirements['boost'] = array(
          'title'       => $t('Boost'),
          'description' => $t('.htaccess file does not contain the boost specific rewrite rules, or the rewrite rules have changed and they need to be updated.', array()),
          'severity'    => REQUIREMENT_ERROR,
          'value'       => $t('.htaccess file'),
        );
      }
      else if (!$root_file || !is_writable($cache_directory)) {
        $requirements['boost'] = array(
          'title'       => $t('Boost'),
          'description' => $t('Directory %dir credentials - Permissions: %fp. Owner %fo. Group %fg.<br /> Your credentials - Group ID: %gid. User ID: %uid. Current script owner: %user.', array('%dir' => getcwd() . '/' . $cache_directory, '%gid' => getmygid(), '%uid' => getmyuid(), '%user' => get_current_user(), '%fp' => substr(sprintf('%o', fileperms($cache_directory)), -4), '%fo' => fileowner($cache_directory), '%fg' => filegroup($cache_directory) )),
          'severity'    => REQUIREMENT_ERROR,
          'value'       => $t('Can not write to filesystem'),
        );
      }
      else {
        $requirements['boost'] = array(
          'title'       => $t('Boost'),
          'severity'    => REQUIREMENT_OK,
          'value'       => t(''),
        );
      }
    break;
  }
  return $requirements;
}
