<?php
// $Id: boost.install,v 1.2.2.1.2.3.2.4 2008/10/25 15:16:21 arto Exp $

/**
 * @file
 * Handles Boost module installation and upgrade tasks.
 */

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_enable().
 */
function boost_enable() {
  drupal_set_message(t('Boost successfully installed. Please review the available <a href="@settings">configuration settings</a>.', array('@settings' => url('admin/settings/performance'))));

  // Forcibly disable Drupal's built-in SQL caching to prevent any conflicts of interest:
  if (variable_get('cache', CACHE_DISABLED) != CACHE_DISABLED) {
    variable_set('cache', CACHE_DISABLED);
    drupal_set_message(t('Drupal\'s standard page caching disabled by Boost.'));
  }
}

/**
 * Implementation of hook_disable().
 */
function boost_disable() {
  // Make sure that the static page cache is wiped when the module is disabled:
  boost_cache_clear_all();
  drupal_set_message(t('Static page cache cleared.'));
}

/**
 * Implementation of hook_install().
 */
function boost_install() {
  // Ensure that the module is loaded early in the bootstrap:
  db_query("UPDATE {system} SET weight = -90 WHERE name = '%s'", 'boost');
}

/**
 * Implementation of hook_uninstall().
 */
function boost_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE '%s_%%'", 'boost');
  cache_clear_all('variables', 'cache');
}

/**
 * Implementation of hook_requirements().
 */
function boost_requirements($phase) {
  $status = array();

  if ($phase == 'runtime') {
    // TODO: check that the Boost-specific .htaccess modifications are correctly installed.
  }

  return $status;
}
